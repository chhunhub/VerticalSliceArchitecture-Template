@page "/"

@rendermode InteractiveServer
<PageTitle>Home</PageTitle>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
@using System.ComponentModel.DataAnnotations
@using MediatR
@using VerticalSlice.Features.CreateCustomer
@using VerticalSlice.Features.GetCustomerList
@inject ISender sender
<EditForm Model="@user" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Customer Information</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">First Name</label>
                    <InputText class="form-control" @bind-Value="user.FirstName" />
                    <ValidationMessage For="@(() => user.FirstName)" class="text-danger" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Last Name</label>
                    <InputText class="form-control" @bind-Value="user.LastName" />
                    <ValidationMessage For="@(() => user.LastName)" class="text-danger" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Email</label>
                    <InputText class="form-control" @bind-Value="user.Email" />
                    <ValidationMessage For="@(() => user.Email)" class="text-danger" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Phone Number</label>
                    <InputText class="form-control" @bind-Value="user.PhoneNumber" />
                    <ValidationMessage For="@(() => user.PhoneNumber)" class="text-danger" />
                </div>

                <div class="col-12">
                    <label class="form-label">Address</label>
                    <InputText class="form-control" @bind-Value="user.Address" />
                    <ValidationMessage For="@(() => user.Address)" class="text-danger" />
                </div>
            </div>

            <div class="mt-4 text-end">
                <button type="submit" class="btn btn-success px-4">Submit</button>
            </div>
        </div>
    </div>
</EditForm>

@if (submitted)
{
    <div class="alert alert-success">Form submitted successfully!</div>
}
@if (IsError)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<h4 class="mt-5">Customer List</h4>
<table class="table table-bordered table-hover table-striped mt-3">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>Email</th>
            <th>Address</th>
            <th>PhoneNumber</th>
        </tr>
    </thead>
    <tbody>
        @if (customers.Any())
        {
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.id</td>
                    <td>@customer.firstName</td>
                    <td>@customer.lastName</td>
                    <td>@customer.email</td>
                    <td>@customer.address</td>
                    <td>@customer.phoneNumber</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center text-muted">No customers found.</td>
            </tr>
        }
    </tbody>
</table>


@if (submitted)
{
    <div class="alert alert-success mt-3">Form submitted successfully!</div>
}
@if (IsError)
{
    <div class="alert alert-success mt-3">@ErrorMessage</div>
}
@code {
    private UserInputModel user = new();
    private bool submitted;
    private CancellationTokenSource cancellationTokenSource = new();
    public string ErrorMessage;
    public bool IsError;
    private List<CustomerResponse> customers { get; set; } = new();
    private async Task HandleValidSubmit()
    {
        var senderCustomer = await sender.Send(new CreateCustomerCommand(user.FirstName, user.LastName, user.Email, user.Address, user.PhoneNumber));

        if (senderCustomer.IsSuccess)
        {
            submitted = true;
            await LoadData();
        }
        else
        {
            IsError = true;
            ErrorMessage = senderCustomer.Error.Description;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        var customer = await sender.Send(new GetCustomerQuery(), cancellationTokenSource.Token);
        if (customer.IsSuccess)
        {
            customers = customer.Value.ToList();
        }
    }
    public class UserInputModel
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;

        [Required]
        public string LastName { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        public string Address { get; set; } = string.Empty;

        public string PhoneNumber { get; set; } = string.Empty;
    }

}
